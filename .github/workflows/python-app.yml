name: Python Tests

on:
  push:
    branches: [ "main", "dev", "staging", "feature/*" ]
  pull_request:
    branches: [ "main", "dev", "staging" ]

env:
  PYTHONPATH: "."

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4  # 更新到 v4
      with:
        python-version: ${{ matrix.python-version }}
        # 移除 cache: 'pip' 暂时避免缓存问题
        
    - name: Install dependencies
      run: |
        echo "=== 安装依赖 ==="
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        echo "=== 验证 pytest 安装 ==="
        pytest --version
        
    - name: Debug environment
      run: |
        echo "=== 环境调试 ==="
        echo "当前目录: $(pwd)"
        echo "目录内容:"
        ls -la
        echo "tests 目录内容:"
        ls -la tests/ || echo "tests 目录不存在"
        echo "app 目录内容:"
        ls -la app/ || echo "app 目录不存在"
        echo "Python 路径:"
        python -c "import sys; print('\n'.join(sys.path))"
        
    - name: Test imports
      run: |
        echo "=== 测试导入 ==="
        python -c "import sys; sys.path.append('.'); from app.app import add_numbers; print('导入成功:', add_numbers(5, 3))" || echo "导入失败"
        
    - name: Run tests
      run: |
        echo "=== 运行测试套件 ==="
        python -m pytest tests/ -v --tb=short --junit-xml=pytest-results.xml
        echo "测试退出代码: $?"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-results
        path: pytest-results.xml
        retention-days: 7
